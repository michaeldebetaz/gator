// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO
    posts (title, url, description, published_at, feed_id)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING
    id, title, url, description, published_at, feed_id, created_at, updated_at
`

type CreatePostParams struct {
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostByUrl = `-- name: GetPostByUrl :one
SELECT
    id, title, url, description, published_at, feed_id, created_at, updated_at
FROM
    posts
WHERE
    url = $1
`

func (q *Queries) GetPostByUrl(ctx context.Context, url string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByUrl, url)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT
    posts.id, posts.title, posts.url, posts.description, posts.published_at, posts.feed_id, posts.created_at, posts.updated_at,
    users.id, users.name, users.created_at, users.updated_at
FROM
    posts
    INNER JOIN feeds ON posts.feed_id = feeds.id
    INNER JOIN feed_follows ON feeds.id = feed_follows.feed_id
    INNER JOIN users ON feed_follows.user_id = users.id
WHERE
    users.id = $1
ORDER BY
    posts.published_at DESC
LIMIT
    $2
`

type GetPostsForUserParams struct {
	ID    uuid.UUID
	Limit int32
}

type GetPostsForUserRow struct {
	Post Post
	User User
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Url,
			&i.Post.Description,
			&i.Post.PublishedAt,
			&i.Post.FeedID,
			&i.Post.CreatedAt,
			&i.Post.UpdatedAt,
			&i.User.ID,
			&i.User.Name,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
